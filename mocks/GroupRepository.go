// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/thiduzz/slack-bot/models"
	"github.com/thiduzz/slack-bot/repositories"
)

// GroupRepository is an autogenerated mock type for the GroupRepository type
type GroupRepository struct {
	mock.Mock
}

// Destroy provides a mock function with given fields: group
func (_m *GroupRepository) Destroy(group *models.Group) error {
	ret := _m.Called(group)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Group) error); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByNameAndChannel provides a mock function with given fields: groupName, channelId
func (_m *GroupRepository) FindByNameAndChannel(groupName string, channelId string) (*models.Group, error) {
	ret := _m.Called(groupName, channelId)

	var r0 *models.Group
	if rf, ok := ret.Get(0).(func(string, string) *models.Group); ok {
		r0 = rf(groupName, channelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(groupName, channelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexByChannelId provides a mock function with given fields: channelId
func (_m *GroupRepository) IndexByChannelId(channelId string) ([]repositories.GroupListItem, error) {
	ret := _m.Called(channelId)

	var r0 []repositories.GroupListItem
	if rf, ok := ret.Get(0).(func(string) []repositories.GroupListItem); ok {
		r0 = rf(channelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositories.GroupListItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: group
func (_m *GroupRepository) Store(group models.Group) error {
	ret := _m.Called(group)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Group) error); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
